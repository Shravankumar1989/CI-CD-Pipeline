pipeline {
    agent any

    tools {
        maven "maven3"
    }

     environment {
        NEXUS_URL = 'http://13.234.231.57:8081'
        NEXUS_REPO = 'spring-boot-app'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials'
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo "Cleaning workspace..."
                cleanWs()
            }
        }

        stage('Git Checkout') {
            steps {
                echo "Checking out code from Git..."
                git branch: 'main', url: 'https://github.com/Shravankumar1989/CI-CD-Pipeline.git'
            }
        }

        stage('Build and Package') {
            steps {
                echo "Listing project directory..."
                sh 'ls -ltr'

                echo 'Building and packaging the application...'
                sh '''
                   cd spring-boot-app
                   mvn clean package -DskipTests
                '''
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo 'Running unit tests...'
                sh '''
                   cd spring-boot-app
                   mvn test
                '''
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('sonar-server') {
                    sh '''
                       cd spring-boot-app
                       mvn sonar:sonar \
                       -Dsonar.projectKey=spring-boot-app \
                       -Dsonar.projectName=spring-boot-app
                    '''
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                echo 'Checking SonarQube quality gate...'
                script {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Pipeline aborted due to SonarQube quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }

        stage('Verify Build Output') {
            steps {
                echo 'Listing files in target/ directory...'
                sh '''
                    cd ${WORKSPACE}/spring-boot-app || exit 1
                    ls -l target/ || echo "No target/ directory found. Build might have failed."
                '''
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
